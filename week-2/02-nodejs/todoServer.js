/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  const port = 3000;
  const app = express();
 
  app.use(bodyParser.json());
  
  // first we need to load the data from the json file which has todos array.
  let data = fs.readFileSync('todos.json', 'utf-8');
  let jsonData = JSON.parse(data);

  // first api --> get request - /todos
  app.get('/todos', (req, res) => {
    if(jsonData.length == 0){
      // improve the handling logic here and learn what is the response we need to send
      res.json('No todos yet please add more todos!');
    }else{
      res.json({'Todos: ' : jsonData});
    }
  })

  // second api GET /todos/:id - Retrieve a specific todo item by ID
  app.get('/todos/:id', (req, res) => {
    let id = req.params.id;
    const todosLength = jsonData.length;
    if(todosLength == 0){
      res.json("There are no todos currently available!")
    }else{
      for(let i = 0 ; i < todosLength; i++){
        if(jsonData[i].id == id){
          res.json(jsonData[i].todo)
        }
      }
      res.sendStatus(404).json(`Todo with ${id} not found in the current todos!`)
    }
  })

  // third api POST /todos --> Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
  app.post('/todos', (req, res) => {
    const title = req.body.title;
    const status = req.body.completed;
    const description = req.body.description;

    let id = jsonData.length + 1;

    jsonData.push({
      "id": id,
      "todo" : {
        "title": title,
        "completed": status,
        "description": description
      }
    })

    res.sendStatus(201).json(`Created todo with id: ${id}`);

  })

  app.listen(port, () => {
    console.log(`Listening on Port: ${port}`);
  })
  
  module.exports = app;